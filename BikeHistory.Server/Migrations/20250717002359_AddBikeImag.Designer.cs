// <auto-generated />
using System;
using BikeHistory.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BikeHistory.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250717002359_AddBikeImag")]
    partial class AddBikeImag
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BikeHistory.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "firstName");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "lastName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "newOwnerName");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.BikeFrame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BikeTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "bikeTypeId");

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "brandId");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "color");

                    b.Property<string>("CurrentOwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "currentOwnerId");

                    b.Property<string>("FrameNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "frameNumber");

                    b.Property<int?>("ManufactureYear")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "manufactureYear");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "manufacturerId");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "model");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "registeredDate");

                    b.HasKey("Id");

                    b.HasIndex("BikeTypeId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CurrentOwnerId");

                    b.HasIndex("FrameNumber")
                        .IsUnique();

                    b.HasIndex("ManufacturerId");

                    b.ToTable("BikeFrames");

                    b.HasAnnotation("Relational:JsonPropertyName", "bikeFrame");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.BikeImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BikeFrameId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "bikeFrameId");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "contentType");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "deletedDate");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "fileName");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "filePath");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "fileSize");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "isDeleted");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "isPrimary");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "originalFileName");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "uploadedBy");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "uploadedDate");

                    b.HasKey("Id");

                    b.HasIndex("BikeFrameId");

                    b.HasIndex("UploadedBy");

                    b.HasIndex("BikeFrameId", "IsPrimary");

                    b.ToTable("BikeImages");

                    b.HasAnnotation("Relational:JsonPropertyName", "images");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.BikeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.ToTable("BikeTypes");

                    b.HasAnnotation("Relational:JsonPropertyName", "bikeType");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "manufacturerId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Brands");

                    b.HasAnnotation("Relational:JsonPropertyName", "brands");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.Maintenance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int>("BikeFrameId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "bikeFrameId");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "maintenanceDate");

                    b.Property<int>("MaintenanceType")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "maintenanceType");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "notes");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "ownerId");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "paymentMethod");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "storeId");

                    b.HasKey("Id");

                    b.HasIndex("BikeFrameId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StoreId");

                    b.ToTable("Maintenances");

                    b.HasAnnotation("Relational:JsonPropertyName", "maintenance");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.MaintenanceDetail", b =>
                {
                    b.Property<Guid>("MaintenanceId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "maintenanceId");

                    b.Property<int>("Seq")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "seq");

                    b.Property<decimal>("LaborCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasAnnotation("Relational:JsonPropertyName", "laborCost");

                    b.Property<string>("PartName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "partName");

                    b.Property<decimal>("PartPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasAnnotation("Relational:JsonPropertyName", "partPrice");

                    b.Property<string>("PartSpecification")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "partSpecification");

                    b.HasKey("MaintenanceId", "Seq");

                    b.ToTable("MaintenanceDetails");

                    b.HasAnnotation("Relational:JsonPropertyName", "maintenanceDetails");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryOfOrigin")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "countryOfOrigin");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "website");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");

                    b.HasAnnotation("Relational:JsonPropertyName", "manufacturer");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.OwnershipRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BikeFrameId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "bikeFrameId");

                    b.Property<string>("NewOwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "newOwnerId");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "notes");

                    b.Property<string>("PreviousOwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "previousOwnerId");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "transferDate");

                    b.HasKey("Id");

                    b.HasIndex("BikeFrameId");

                    b.HasIndex("NewOwnerId");

                    b.HasIndex("PreviousOwnerId");

                    b.ToTable("OwnershipRecords");

                    b.HasAnnotation("Relational:JsonPropertyName", "ownershipHistory");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.UserActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "actionType");

                    b.Property<string>("AdditionalDataJson")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "additionalDataJson");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "ipAddress");

                    b.Property<string>("PageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "pageUrl");

                    b.Property<string>("PreviousPageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "previousPageUrl");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasAnnotation("Relational:JsonPropertyName", "timestamp");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "userAgent");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "userId");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "userName");

                    b.HasKey("Id");

                    b.ToTable("UserActivityLogs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BikeHistory.Server.Models.BikeFrame", b =>
                {
                    b.HasOne("BikeHistory.Server.Models.BikeType", "BikeType")
                        .WithMany("BikeFrames")
                        .HasForeignKey("BikeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeHistory.Server.Models.Brand", "Brand")
                        .WithMany("BikeFrames")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeHistory.Server.Models.ApplicationUser", "CurrentOwner")
                        .WithMany("OwnedBikes")
                        .HasForeignKey("CurrentOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BikeHistory.Server.Models.Manufacturer", "Manufacturer")
                        .WithMany("BikeFrames")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BikeType");

                    b.Navigation("Brand");

                    b.Navigation("CurrentOwner");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.BikeImage", b =>
                {
                    b.HasOne("BikeHistory.Server.Models.BikeFrame", "BikeFrame")
                        .WithMany("Images")
                        .HasForeignKey("BikeFrameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeHistory.Server.Models.ApplicationUser", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BikeFrame");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.Brand", b =>
                {
                    b.HasOne("BikeHistory.Server.Models.Manufacturer", "Manufacturer")
                        .WithMany("Brands")
                        .HasForeignKey("ManufacturerId");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.Maintenance", b =>
                {
                    b.HasOne("BikeHistory.Server.Models.BikeFrame", "BikeFrame")
                        .WithMany()
                        .HasForeignKey("BikeFrameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeHistory.Server.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BikeHistory.Server.Models.ApplicationUser", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BikeFrame");

                    b.Navigation("Owner");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.MaintenanceDetail", b =>
                {
                    b.HasOne("BikeHistory.Server.Models.Maintenance", "Maintenance")
                        .WithMany("MaintenanceDetails")
                        .HasForeignKey("MaintenanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Maintenance");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.OwnershipRecord", b =>
                {
                    b.HasOne("BikeHistory.Server.Models.BikeFrame", "BikeFrame")
                        .WithMany("OwnershipHistory")
                        .HasForeignKey("BikeFrameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeHistory.Server.Models.ApplicationUser", "NewOwner")
                        .WithMany("OwnershipHistory")
                        .HasForeignKey("NewOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BikeHistory.Server.Models.ApplicationUser", "PreviousOwner")
                        .WithMany()
                        .HasForeignKey("PreviousOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BikeFrame");

                    b.Navigation("NewOwner");

                    b.Navigation("PreviousOwner");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BikeHistory.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BikeHistory.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeHistory.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BikeHistory.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeHistory.Server.Models.ApplicationUser", b =>
                {
                    b.Navigation("OwnedBikes");

                    b.Navigation("OwnershipHistory");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.BikeFrame", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("OwnershipHistory");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.BikeType", b =>
                {
                    b.Navigation("BikeFrames");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.Brand", b =>
                {
                    b.Navigation("BikeFrames");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.Maintenance", b =>
                {
                    b.Navigation("MaintenanceDetails");
                });

            modelBuilder.Entity("BikeHistory.Server.Models.Manufacturer", b =>
                {
                    b.Navigation("BikeFrames");

                    b.Navigation("Brands");
                });
#pragma warning restore 612, 618
        }
    }
}
